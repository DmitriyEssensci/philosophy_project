{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!data.length) return;\n    console.log('Данные для отрисовки:', data); // Отладочный вывод\n\n    const graph = new Graph();\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id.toString(), {\n        label: item.person_name,\n        x: item.x,\n        y: item.y,\n        size: 5,\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Функция для разбиения строки на массив имён\n    const splitNames = names => {\n      if (!names) return [];\n      // Удаляем лишние слова (например, \"и др.\") и разделяем по запятым\n      return names.replace(/ и др\\./g, '') // Удаляем \"и др.\"\n      .split(',').map(name => name.trim().toLowerCase());\n    };\n\n    // Функция для поиска частичного совпадения\n    const isNameInList = (name, list) => {\n      return list.some(item => item.includes(name));\n    };\n\n    // Добавляем рёбра на основе influenced_by и influenced\n    data.forEach(sourceItem => {\n      const sourceId = sourceItem.id.toString();\n      const sourceName = sourceItem.person_name.trim().toLowerCase();\n      data.forEach(targetItem => {\n        const targetId = targetItem.id.toString();\n\n        // Обрабатываем influenced_by (фиолетовые рёбра)\n        if (targetItem.influenced_by) {\n          const influencedByNames = splitNames(targetItem.influenced_by);\n          console.log(`Проверка influenced_by для ${targetItem.person_name}:`, influencedByNames);\n          if (isNameInList(sourceName, influencedByNames)) {\n            console.log(`Добавлено фиолетовое ребро от ${sourceName} к ${targetItem.person_name}`);\n            graph.addEdge(sourceId, targetId, {\n              color: '#800080'\n            });\n          }\n        }\n\n        // Обрабатываем influenced (зелёные рёбра)\n        if (targetItem.influenced) {\n          const influencedNames = splitNames(targetItem.influenced);\n          console.log(`Проверка influenced для ${targetItem.person_name}:`, influencedNames);\n          if (isNameInList(sourceName, influencedNames)) {\n            console.log(`Добавлено зелёное ребро от ${targetItem.person_name} к ${sourceName}`);\n            graph.addEdge(targetId, sourceId, {\n              color: '#008000'\n            });\n          }\n        }\n      });\n    });\n    console.log('Узлы графа:', graph.nodes()); // Отладочный вывод\n    console.log('Рёбра графа:', graph.edges()); // Отладочный вывод\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\n      renderEdgeLabels: false,\n      enableEdgeHoverEvents: false,\n      enableEdgeClickEvents: false\n    });\n    console.log('Sigma инициализирован:', sigmaInstance); // Отладочный вывод\n\n    // Применяем ForceAtlas2 с меньшим количеством итераций\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 20\n    });\n\n    // Обработка событий\n    sigmaInstance.on('clickNode', event => {\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterClick(node);\n    });\n    sigmaInstance.on('doubleClickNode', event => {\n      event.preventSigmaDefault();\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterDoubleClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '1200px',\n      height: '900px',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default _c2 = /*#__PURE__*/React.memo(SpiderWeb);\nvar _c, _c2;\n$RefreshReg$(_c, \"SpiderWeb\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","length","console","log","graph","forEach","item","addNode","id","toString","label","person_name","x","y","size","color","getColorBySchool","school_teaching","splitNames","names","replace","split","map","name","trim","toLowerCase","isNameInList","list","some","includes","sourceItem","sourceId","sourceName","targetItem","targetId","influenced_by","influencedByNames","addEdge","influenced","influencedNames","nodes","edges","sigmaInstance","current","renderEdgeLabels","enableEdgeHoverEvents","enableEdgeClickEvents","settings","inferSettings","assign","iterations","on","event","node","find","preventSigmaDefault","kill","school","colors","index","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    console.log('Данные для отрисовки:', data); // Отладочный вывод\r\n\r\n    const graph = new Graph();\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id.toString(), {\r\n        label: item.person_name,\r\n        x: item.x,\r\n        y: item.y,\r\n        size: 5,\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Функция для разбиения строки на массив имён\r\n    const splitNames = (names) => {\r\n      if (!names) return [];\r\n      // Удаляем лишние слова (например, \"и др.\") и разделяем по запятым\r\n      return names\r\n        .replace(/ и др\\./g, '') // Удаляем \"и др.\"\r\n        .split(',')\r\n        .map((name) => name.trim().toLowerCase());\r\n    };\r\n\r\n    // Функция для поиска частичного совпадения\r\n    const isNameInList = (name, list) => {\r\n      return list.some((item) => item.includes(name));\r\n    };\r\n\r\n    // Добавляем рёбра на основе influenced_by и influenced\r\n    data.forEach((sourceItem) => {\r\n      const sourceId = sourceItem.id.toString();\r\n      const sourceName = sourceItem.person_name.trim().toLowerCase();\r\n\r\n      data.forEach((targetItem) => {\r\n        const targetId = targetItem.id.toString();\r\n\r\n        // Обрабатываем influenced_by (фиолетовые рёбра)\r\n        if (targetItem.influenced_by) {\r\n          const influencedByNames = splitNames(targetItem.influenced_by);\r\n          console.log(`Проверка influenced_by для ${targetItem.person_name}:`, influencedByNames);\r\n\r\n          if (isNameInList(sourceName, influencedByNames)) {\r\n            console.log(`Добавлено фиолетовое ребро от ${sourceName} к ${targetItem.person_name}`);\r\n            graph.addEdge(sourceId, targetId, { color: '#800080' });\r\n          }\r\n        }\r\n\r\n        // Обрабатываем influenced (зелёные рёбра)\r\n        if (targetItem.influenced) {\r\n          const influencedNames = splitNames(targetItem.influenced);\r\n          console.log(`Проверка influenced для ${targetItem.person_name}:`, influencedNames);\r\n\r\n          if (isNameInList(sourceName, influencedNames)) {\r\n            console.log(`Добавлено зелёное ребро от ${targetItem.person_name} к ${sourceName}`);\r\n            graph.addEdge(targetId, sourceId, { color: '#008000' });\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    console.log('Узлы графа:', graph.nodes()); // Отладочный вывод\r\n    console.log('Рёбра графа:', graph.edges()); // Отладочный вывод\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\r\n      renderEdgeLabels: false,\r\n      enableEdgeHoverEvents: false,\r\n      enableEdgeClickEvents: false,\r\n    });\r\n\r\n    console.log('Sigma инициализирован:', sigmaInstance); // Отладочный вывод\r\n\r\n    // Применяем ForceAtlas2 с меньшим количеством итераций\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 20 });\r\n\r\n    // Обработка событий\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      event.preventSigmaDefault();\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return <div ref={containerRef} style={{ width: '1200px', height: '900px', border: '1px solid #ccc' }} />;\r\n};\r\n\r\nexport default React.memo(SpiderWeb);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}