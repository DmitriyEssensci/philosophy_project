{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!data.length) return;\n    const graph = new Graph();\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id.toString(), {\n        label: item.person_name,\n        // Отключите подписи для ускорения\n        x: item.x,\n        y: item.y,\n        size: 5,\n        // Уменьшите размер узлов\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Добавляем ребра (только между соседними узлами)\n    const schoolMap = {};\n    data.forEach(item => {\n      if (!schoolMap[item.school_teaching]) {\n        schoolMap[item.school_teaching] = [];\n      }\n      schoolMap[item.school_teaching].push(item.id);\n    });\n    Object.values(schoolMap).forEach(group => {\n      if (group.length > 1) {\n        for (let i = 0; i < group.length - 1; i++) {\n          graph.addEdge(group[i], group[i + 1], {\n            color: '#ccc'\n          });\n        }\n      }\n    });\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\n      renderEdgeLabels: false,\n      enableEdgeHoverEvents: false,\n      enableEdgeClickEvents: false\n    });\n\n    // Применяем ForceAtlas2 с меньшим количеством итераций\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 20\n    });\n\n    // Обработка событий\n    sigmaInstance.on('clickNode', event => {\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterClick(node);\n    });\n    sigmaInstance.on('doubleClickNode', event => {\n      event.preventSigmaDefault();\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterDoubleClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '1200px',\n      height: '900px',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default _c2 = /*#__PURE__*/React.memo(SpiderWeb);\nvar _c, _c2;\n$RefreshReg$(_c, \"SpiderWeb\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","length","graph","forEach","item","addNode","id","toString","label","person_name","x","y","size","color","getColorBySchool","school_teaching","schoolMap","push","Object","values","group","i","addEdge","sigmaInstance","current","renderEdgeLabels","enableEdgeHoverEvents","enableEdgeClickEvents","settings","inferSettings","assign","iterations","on","event","node","find","preventSigmaDefault","kill","school","colors","index","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const graph = new Graph();\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id.toString(), {\r\n        label: item.person_name, // Отключите подписи для ускорения\r\n        x: item.x,\r\n        y: item.y,\r\n        size: 5, // Уменьшите размер узлов\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Добавляем ребра (только между соседними узлами)\r\n    const schoolMap = {};\r\n    data.forEach((item) => {\r\n      if (!schoolMap[item.school_teaching]) {\r\n        schoolMap[item.school_teaching] = [];\r\n      }\r\n      schoolMap[item.school_teaching].push(item.id);\r\n    });\r\n\r\n    Object.values(schoolMap).forEach((group) => {\r\n      if (group.length > 1) {\r\n        for (let i = 0; i < group.length - 1; i++) {\r\n          graph.addEdge(group[i], group[i + 1], { color: '#ccc' });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\r\n      renderEdgeLabels: false,\r\n      enableEdgeHoverEvents: false,\r\n      enableEdgeClickEvents: false,\r\n    });\r\n\r\n    // Применяем ForceAtlas2 с меньшим количеством итераций\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 20 });\r\n\r\n    // Обработка событий\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      event.preventSigmaDefault();\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return <div ref={containerRef} style={{ width: '1200px', height: '900px', border: '1px solid #ccc' }} />;\r\n};\r\n\r\nexport default React.memo(SpiderWeb);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}