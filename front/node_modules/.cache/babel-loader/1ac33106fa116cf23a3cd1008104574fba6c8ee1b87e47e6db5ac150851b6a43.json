{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    console.log('Данные для отрисовки:', data); // Отладочный вывод\n    if (!data.length) return;\n\n    // Создаем граф\n    const graph = new Graph();\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id, {\n        label: item.person_name,\n        x: item.x || Math.random() * 500,\n        // Если x отсутствует, используем случайное значение\n        y: item.y || Math.random() * 500,\n        // Если y отсутствует, используем случайное значение\n        size: 10,\n        // Размер узла\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Добавляем ребра\n    const schoolMap = {};\n    data.forEach(item => {\n      if (!schoolMap[item.school_teaching]) {\n        schoolMap[item.school_teaching] = [];\n      }\n      schoolMap[item.school_teaching].push(item.id);\n    });\n    Object.values(schoolMap).forEach(group => {\n      if (group.length > 1) {\n        for (let i = 0; i < group.length - 1; i++) {\n          for (let j = i + 1; j < group.length; j++) {\n            graph.addEdge(group[i], group[j], {\n              color: '#ccc'\n            });\n          }\n        }\n      }\n    });\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current);\n\n    // Применяем ForceAtlas2 layout\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 50\n    });\n\n    // Обработка клика на узел\n    sigmaInstance.on('clickNode', event => {\n      const nodeId = event.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterClick(node);\n    });\n\n    // Обработка двойного клика на узел\n    sigmaInstance.on('doubleClickNode', event => {\n      const nodeId = event.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterDoubleClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '1600px',\n      height: '930px',\n      border: '10px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default SpiderWeb;\nvar _c;\n$RefreshReg$(_c, \"SpiderWeb\");","map":{"version":3,"names":["React","useEffect","useRef","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","console","log","length","graph","forEach","item","addNode","id","label","person_name","x","Math","random","y","size","color","getColorBySchool","school_teaching","schoolMap","push","Object","values","group","i","j","addEdge","sigmaInstance","current","settings","inferSettings","assign","iterations","on","event","nodeId","node","find","kill","school","colors","index","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Данные для отрисовки:', data); // Отладочный вывод\r\n    if (!data.length) return;\r\n\r\n    // Создаем граф\r\n    const graph = new Graph();\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id, {\r\n        label: item.person_name,\r\n        x: item.x || Math.random() * 500, // Если x отсутствует, используем случайное значение\r\n        y: item.y || Math.random() * 500, // Если y отсутствует, используем случайное значение\r\n        size: 10, // Размер узла\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Добавляем ребра\r\n    const schoolMap = {};\r\n    data.forEach((item) => {\r\n      if (!schoolMap[item.school_teaching]) {\r\n        schoolMap[item.school_teaching] = [];\r\n      }\r\n      schoolMap[item.school_teaching].push(item.id);\r\n    });\r\n\r\n    Object.values(schoolMap).forEach((group) => {\r\n      if (group.length > 1) {\r\n        for (let i = 0; i < group.length - 1; i++) {\r\n          for (let j = i + 1; j < group.length; j++) {\r\n            graph.addEdge(group[i], group[j], {\r\n              color: '#ccc',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current);\r\n\r\n    // Применяем ForceAtlas2 layout\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 50 });\r\n\r\n    // Обработка клика на узел\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const nodeId = event.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    // Обработка двойного клика на узел\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      const nodeId = event.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return <div ref={containerRef} style={{ width: '1600px', height: '930px', border: '10px solid #ccc' }} />;\r\n};\r\n\r\nexport default SpiderWeb;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAOC,WAAW,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,aAAa;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAMC,YAAY,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,IAAI,CAAC,CAAC,CAAC;IAC5C,IAAI,CAACA,IAAI,CAACO,MAAM,EAAE;;IAElB;IACA,MAAMC,KAAK,GAAG,IAAIb,KAAK,CAAC,CAAC;;IAEzB;IACAK,IAAI,CAACS,OAAO,CAAEC,IAAI,IAAK;MACrBF,KAAK,CAACG,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACI,WAAW;QACvBC,CAAC,EAAEL,IAAI,CAACK,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAE;QAClCC,CAAC,EAAER,IAAI,CAACQ,CAAC,IAAIF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAE;QAClCE,IAAI,EAAE,EAAE;QAAE;QACVC,KAAK,EAAEC,gBAAgB,CAACX,IAAI,CAACY,eAAe;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBvB,IAAI,CAACS,OAAO,CAAEC,IAAI,IAAK;MACrB,IAAI,CAACa,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,EAAE;QACpCC,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,GAAG,EAAE;MACtC;MACAC,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,CAACE,IAAI,CAACd,IAAI,CAACE,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEFa,MAAM,CAACC,MAAM,CAACH,SAAS,CAAC,CAACd,OAAO,CAAEkB,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACpB,MAAM,GAAG,CAAC,EAAE;QACpB,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACpB,MAAM,GAAG,CAAC,EAAEqB,CAAC,EAAE,EAAE;UACzC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACpB,MAAM,EAAEsB,CAAC,EAAE,EAAE;YACzCrB,KAAK,CAACsB,OAAO,CAACH,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACE,CAAC,CAAC,EAAE;cAChCT,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAMW,aAAa,GAAG,IAAIrC,KAAK,CAACc,KAAK,EAAEJ,YAAY,CAAC4B,OAAO,CAAC;;IAE5D;IACA,MAAMC,QAAQ,GAAGrC,WAAW,CAACsC,aAAa,CAAC1B,KAAK,CAAC;IACjDZ,WAAW,CAACuC,MAAM,CAAC3B,KAAK,EAAE;MAAEyB,QAAQ;MAAEG,UAAU,EAAE;IAAG,CAAC,CAAC;;IAEvD;IACAL,aAAa,CAACM,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;MACvC,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI;MACzB,MAAMA,IAAI,GAAGxC,IAAI,CAACyC,IAAI,CAAE/B,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAK2B,MAAM,CAAC;MACpD,IAAIC,IAAI,EAAEvC,aAAa,CAACuC,IAAI,CAAC;IAC/B,CAAC,CAAC;;IAEF;IACAT,aAAa,CAACM,EAAE,CAAC,iBAAiB,EAAGC,KAAK,IAAK;MAC7C,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI;MACzB,MAAMA,IAAI,GAAGxC,IAAI,CAACyC,IAAI,CAAE/B,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAK2B,MAAM,CAAC;MACpD,IAAIC,IAAI,EAAEtC,mBAAmB,CAACsC,IAAI,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO,MAAM;MACXT,aAAa,CAACW,IAAI,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAAC1C,IAAI,EAAEC,aAAa,EAAEC,mBAAmB,CAAC,CAAC;EAE9C,MAAMmB,gBAAgB,GAAIsB,MAAM,IAAK;IACnC,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACtE,MAAMC,KAAK,GAAG,CAAAF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEpC,MAAM,IAAGqC,MAAM,CAACrC,MAAM,IAAI,CAAC;IACjD,OAAOqC,MAAM,CAACC,KAAK,CAAC;EACtB,CAAC;EAED,oBAAO/C,OAAA;IAAKgD,GAAG,EAAE1C,YAAa;IAAC2C,KAAK,EAAE;MAAEC,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAkB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3G,CAAC;AAACnD,EAAA,CA3EIJ,SAAS;AAAAwD,EAAA,GAATxD,SAAS;AA6Ef,eAAeA,SAAS;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}