{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!data.length) return;\n    const graph = new Graph({\n      multi: true\n    });\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id.toString(), {\n        label: item.person_name,\n        x: item.x,\n        y: item.y,\n        size: 5,\n        color: '#FF6F61'\n      });\n    });\n\n    // Добавляем рёбра\n    data.forEach(sourceItem => {\n      const sourceId = sourceItem.id.toString();\n      const sourceName = sourceItem.person_name.trim().toLowerCase();\n      data.forEach(targetItem => {\n        const targetId = targetItem.id.toString();\n        if (targetItem.influenced_by && targetItem.influenced_by.includes(sourceName)) {\n          graph.addEdge(sourceId, targetId, {\n            color: '#800080'\n          });\n        }\n        if (targetItem.influenced && targetItem.influenced.includes(sourceName)) {\n          graph.addEdge(targetId, sourceId, {\n            color: '#008000'\n          });\n        }\n      });\n    });\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\n      renderEdgeLabels: false,\n      enableEdgeHoverEvents: false,\n      enableEdgeClickEvents: false\n    });\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 20\n    });\n    sigmaInstance.on('clickNode', event => {\n      event.preventDefault();\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterClick(node);\n    });\n    sigmaInstance.on('doubleClickNode', event => {\n      event.preventDefault();\n      event.preventSigmaDefault();\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterDoubleClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '1200px',\n      height: '900px',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default _c2 = /*#__PURE__*/React.memo(SpiderWeb);\nvar _c, _c2;\n$RefreshReg$(_c, \"SpiderWeb\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","length","graph","multi","forEach","item","addNode","id","toString","label","person_name","x","y","size","color","sourceItem","sourceId","sourceName","trim","toLowerCase","targetItem","targetId","influenced_by","includes","addEdge","influenced","sigmaInstance","current","renderEdgeLabels","enableEdgeHoverEvents","enableEdgeClickEvents","settings","inferSettings","assign","iterations","on","event","preventDefault","node","find","preventSigmaDefault","kill","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const graph = new Graph({ multi: true });\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id.toString(), {\r\n        label: item.person_name,\r\n        x: item.x,\r\n        y: item.y,\r\n        size: 5,\r\n        color: '#FF6F61',\r\n      });\r\n    });\r\n\r\n    // Добавляем рёбра\r\n    data.forEach((sourceItem) => {\r\n      const sourceId = sourceItem.id.toString();\r\n      const sourceName = sourceItem.person_name.trim().toLowerCase();\r\n\r\n      data.forEach((targetItem) => {\r\n        const targetId = targetItem.id.toString();\r\n\r\n        if (targetItem.influenced_by && targetItem.influenced_by.includes(sourceName)) {\r\n          graph.addEdge(sourceId, targetId, { color: '#800080' });\r\n        }\r\n\r\n        if (targetItem.influenced && targetItem.influenced.includes(sourceName)) {\r\n          graph.addEdge(targetId, sourceId, { color: '#008000' });\r\n        }\r\n      });\r\n    });\r\n\r\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\r\n      renderEdgeLabels: false,\r\n      enableEdgeHoverEvents: false,\r\n      enableEdgeClickEvents: false,\r\n    });\r\n\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 20 });\r\n\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      event.preventDefault();\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      event.preventDefault();\r\n      event.preventSigmaDefault();\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  return <div ref={containerRef} style={{ width: '1200px', height: '900px', border: '1px solid #ccc' }} />;\r\n};\r\n\r\nexport default React.memo(SpiderWeb);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}