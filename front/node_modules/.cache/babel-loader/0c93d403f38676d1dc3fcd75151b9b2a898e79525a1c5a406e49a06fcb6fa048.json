{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const [sigmaInstance, setSigmaInstance] = useState(null);\n\n  // Функция для обновления размеров контейнера\n  const updateDimensions = () => {\n    if (containerRef.current && sigmaInstance) {\n      sigmaInstance.refresh();\n    }\n  };\n  useEffect(() => {\n    // Обновляем размеры при монтировании компонента\n    updateDimensions();\n\n    // Обновляем размеры при изменении размеров окна\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, [sigmaInstance]);\n  useEffect(() => {\n    console.log('Данные для отрисовки:', data);\n    if (!data.length || !containerRef.current) return;\n    const {\n      width,\n      height\n    } = containerRef.current.getBoundingClientRect();\n\n    // Создаем граф\n    const graph = new Graph();\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id, {\n        label: item.person_name,\n        x: item.x || Math.random() * width,\n        y: item.y || Math.random() * height,\n        size: 10,\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Добавляем ребра\n    const schoolMap = {};\n    data.forEach(item => {\n      if (!schoolMap[item.school_teaching]) {\n        schoolMap[item.school_teaching] = [];\n      }\n      schoolMap[item.school_teaching].push(item.id);\n    });\n    Object.values(schoolMap).forEach(group => {\n      if (group.length > 1) {\n        for (let i = 0; i < group.length - 1; i++) {\n          for (let j = i + 1; j < group.length; j++) {\n            graph.addEdge(group[i], group[j], {\n              color: '#ccc'\n            });\n          }\n        }\n      }\n    });\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\n      allowInvalidContainer: false\n    });\n\n    // Применяем ForceAtlas2 layout\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 50\n    });\n\n    // Обработка клика на узел\n    sigmaInstance.on('clickNode', event => {\n      const nodeId = event.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterClick(node);\n    });\n\n    // Обработка двойного клика на узел\n    sigmaInstance.on('doubleClickNode', event => {\n      event.preventSigmaDefault(); // Отключаем стандартное поведение зума\n      const nodeId = event.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterDoubleClick(node);\n    });\n\n    // Сохраняем экземпляр sigma в состоянии\n    setSigmaInstance(sigmaInstance);\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"sigma-container\",\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiderWeb, \"DKHw8Dd64SgXK+wCiIBLlHN1lgY=\");\n_c = SpiderWeb;\nexport default SpiderWeb;\nvar _c;\n$RefreshReg$(_c, \"SpiderWeb\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","sigmaInstance","setSigmaInstance","updateDimensions","current","refresh","window","addEventListener","removeEventListener","console","log","length","width","height","getBoundingClientRect","graph","forEach","item","addNode","id","label","person_name","x","Math","random","y","size","color","getColorBySchool","school_teaching","schoolMap","push","Object","values","group","i","j","addEdge","allowInvalidContainer","settings","inferSettings","assign","iterations","on","event","nodeId","node","find","preventSigmaDefault","kill","school","colors","index","ref","className","style","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n  const [sigmaInstance, setSigmaInstance] = useState(null);\r\n\r\n  // Функция для обновления размеров контейнера\r\n  const updateDimensions = () => {\r\n    if (containerRef.current && sigmaInstance) {\r\n      sigmaInstance.refresh();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Обновляем размеры при монтировании компонента\r\n    updateDimensions();\r\n\r\n    // Обновляем размеры при изменении размеров окна\r\n    window.addEventListener('resize', updateDimensions);\r\n    return () => window.removeEventListener('resize', updateDimensions);\r\n  }, [sigmaInstance]);\r\n\r\n  useEffect(() => {\r\n    console.log('Данные для отрисовки:', data);\r\n    if (!data.length || !containerRef.current) return;\r\n\r\n    const { width, height } = containerRef.current.getBoundingClientRect();\r\n\r\n    // Создаем граф\r\n    const graph = new Graph();\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id, {\r\n        label: item.person_name,\r\n        x: item.x || Math.random() * width,\r\n        y: item.y || Math.random() * height,\r\n        size: 10,\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Добавляем ребра\r\n    const schoolMap = {};\r\n    data.forEach((item) => {\r\n      if (!schoolMap[item.school_teaching]) {\r\n        schoolMap[item.school_teaching] = [];\r\n      }\r\n      schoolMap[item.school_teaching].push(item.id);\r\n    });\r\n\r\n    Object.values(schoolMap).forEach((group) => {\r\n      if (group.length > 1) {\r\n        for (let i = 0; i < group.length - 1; i++) {\r\n          for (let j = i + 1; j < group.length; j++) {\r\n            graph.addEdge(group[i], group[j], {\r\n              color: '#ccc',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\r\n      allowInvalidContainer: false,\r\n    });\r\n\r\n    // Применяем ForceAtlas2 layout\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 50 });\r\n\r\n    // Обработка клика на узел\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const nodeId = event.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    // Обработка двойного клика на узел\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      event.preventSigmaDefault(); // Отключаем стандартное поведение зума\r\n      const nodeId = event.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    // Сохраняем экземпляр sigma в состоянии\r\n    setSigmaInstance(sigmaInstance);\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"sigma-container\"\r\n      style={{\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'relative',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SpiderWeb;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAOC,WAAW,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,aAAa;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAMC,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIH,YAAY,CAACI,OAAO,IAAIH,aAAa,EAAE;MACzCA,aAAa,CAACI,OAAO,CAAC,CAAC;IACzB;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACAgB,gBAAgB,CAAC,CAAC;;IAElB;IACAG,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEJ,gBAAgB,CAAC;IACnD,OAAO,MAAMG,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEL,gBAAgB,CAAC;EACrE,CAAC,EAAE,CAACF,aAAa,CAAC,CAAC;EAEnBd,SAAS,CAAC,MAAM;IACdsB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEd,IAAI,CAAC;IAC1C,IAAI,CAACA,IAAI,CAACe,MAAM,IAAI,CAACX,YAAY,CAACI,OAAO,EAAE;IAE3C,MAAM;MAAEQ,KAAK;MAAEC;IAAO,CAAC,GAAGb,YAAY,CAACI,OAAO,CAACU,qBAAqB,CAAC,CAAC;;IAEtE;IACA,MAAMC,KAAK,GAAG,IAAIxB,KAAK,CAAC,CAAC;;IAEzB;IACAK,IAAI,CAACoB,OAAO,CAAEC,IAAI,IAAK;MACrBF,KAAK,CAACG,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACI,WAAW;QACvBC,CAAC,EAAEL,IAAI,CAACK,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,KAAK;QAClCa,CAAC,EAAER,IAAI,CAACQ,CAAC,IAAIF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGX,MAAM;QACnCa,IAAI,EAAE,EAAE;QACRC,KAAK,EAAEC,gBAAgB,CAACX,IAAI,CAACY,eAAe;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBlC,IAAI,CAACoB,OAAO,CAAEC,IAAI,IAAK;MACrB,IAAI,CAACa,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,EAAE;QACpCC,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,GAAG,EAAE;MACtC;MACAC,SAAS,CAACb,IAAI,CAACY,eAAe,CAAC,CAACE,IAAI,CAACd,IAAI,CAACE,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEFa,MAAM,CAACC,MAAM,CAACH,SAAS,CAAC,CAACd,OAAO,CAAEkB,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACvB,MAAM,GAAG,CAAC,EAAE;QACpB,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACvB,MAAM,GAAG,CAAC,EAAEwB,CAAC,EAAE,EAAE;UACzC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACvB,MAAM,EAAEyB,CAAC,EAAE,EAAE;YACzCrB,KAAK,CAACsB,OAAO,CAACH,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACE,CAAC,CAAC,EAAE;cAChCT,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAM1B,aAAa,GAAG,IAAIX,KAAK,CAACyB,KAAK,EAAEf,YAAY,CAACI,OAAO,EAAE;MAC3DkC,qBAAqB,EAAE;IACzB,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAG/C,WAAW,CAACgD,aAAa,CAACzB,KAAK,CAAC;IACjDvB,WAAW,CAACiD,MAAM,CAAC1B,KAAK,EAAE;MAAEwB,QAAQ;MAAEG,UAAU,EAAE;IAAG,CAAC,CAAC;;IAEvD;IACAzC,aAAa,CAAC0C,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;MACvC,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI;MACzB,MAAMA,IAAI,GAAGlD,IAAI,CAACmD,IAAI,CAAE9B,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAK0B,MAAM,CAAC;MACpD,IAAIC,IAAI,EAAEjD,aAAa,CAACiD,IAAI,CAAC;IAC/B,CAAC,CAAC;;IAEF;IACA7C,aAAa,CAAC0C,EAAE,CAAC,iBAAiB,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACI,mBAAmB,CAAC,CAAC,CAAC,CAAC;MAC7B,MAAMH,MAAM,GAAGD,KAAK,CAACE,IAAI;MACzB,MAAMA,IAAI,GAAGlD,IAAI,CAACmD,IAAI,CAAE9B,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAK0B,MAAM,CAAC;MACpD,IAAIC,IAAI,EAAEhD,mBAAmB,CAACgD,IAAI,CAAC;IACrC,CAAC,CAAC;;IAEF;IACA5C,gBAAgB,CAACD,aAAa,CAAC;IAE/B,OAAO,MAAM;MACXA,aAAa,CAACgD,IAAI,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACrD,IAAI,EAAEC,aAAa,EAAEC,mBAAmB,CAAC,CAAC;EAE9C,MAAM8B,gBAAgB,GAAIsB,MAAM,IAAK;IACnC,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACtE,MAAMC,KAAK,GAAG,CAAAF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEvC,MAAM,IAAGwC,MAAM,CAACxC,MAAM,IAAI,CAAC;IACjD,OAAOwC,MAAM,CAACC,KAAK,CAAC;EACtB,CAAC;EAED,oBACE1D,OAAA;IACE2D,GAAG,EAAErD,YAAa;IAClBsD,SAAS,EAAC,iBAAiB;IAC3BC,KAAK,EAAE;MACL3C,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,MAAM;MACd2C,QAAQ,EAAE;IACZ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAC7D,EAAA,CA9GIJ,SAAS;AAAAkE,EAAA,GAATlE,SAAS;AAgHf,eAAeA,SAAS;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}