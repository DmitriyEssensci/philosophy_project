{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Sigma from 'sigma';\nimport { Graph } from 'graphology';\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick,\n  onCenterDoubleClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!data.length) return;\n    const graph = new Graph({\n      multi: true\n    }); // Создаём мультиграф\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id.toString(), {\n        label: item.person_name,\n        x: item.x,\n        y: item.y,\n        size: 5,\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Функция для разбиения строки на массив имён\n    const splitNames = names => {\n      if (!names) return [];\n      return names.split(',').map(name => name.trim().toLowerCase());\n    };\n\n    // Функция для получения части строки до запятой\n    const getNameBeforeComma = name => {\n      return name.split(',')[0].trim().toLowerCase();\n    };\n\n    // Добавляем рёбра на основе influenced_by и influenced\n    data.forEach(sourceItem => {\n      const sourceId = sourceItem.id.toString();\n      const sourceName = getNameBeforeComma(sourceItem.person_name); // Берём часть до запятой\n\n      data.forEach(targetItem => {\n        const targetId = targetItem.id.toString();\n\n        // Обрабатываем influenced_by (фиолетовые рёбра)\n        if (targetItem.influenced_by) {\n          const influencedByNames = splitNames(targetItem.influenced_by);\n          if (influencedByNames.some(name => getNameBeforeComma(name) === sourceName)) {\n            graph.addEdge(sourceId, targetId, {\n              color: '#800080'\n            });\n          }\n        }\n\n        // Обрабатываем influenced (зелёные рёбра)\n        if (targetItem.influenced) {\n          const influencedNames = splitNames(targetItem.influenced);\n          if (influencedNames.some(name => getNameBeforeComma(name) === sourceName)) {\n            graph.addEdge(targetId, sourceId, {\n              color: '#008000'\n            });\n          }\n        }\n      });\n    });\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\n      renderEdgeLabels: false,\n      enableEdgeHoverEvents: false,\n      enableEdgeClickEvents: false\n    });\n\n    // Применяем ForceAtlas2 с меньшим количеством итераций\n    const settings = forceAtlas2.inferSettings(graph);\n    forceAtlas2.assign(graph, {\n      settings,\n      iterations: 20\n    });\n\n    // Обработка событий\n    sigmaInstance.on('clickNode', event => {\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterClick(node);\n    });\n    sigmaInstance.on('doubleClickNode', event => {\n      event.preventSigmaDefault();\n      const node = data.find(item => item.id.toString() === event.node);\n      if (node) onCenterDoubleClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick, onCenterDoubleClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '2000px',\n      height: '1200px',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default _c2 = /*#__PURE__*/React.memo(SpiderWeb);\nvar _c, _c2;\n$RefreshReg$(_c, \"SpiderWeb\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","Sigma","Graph","forceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","onCenterDoubleClick","_s","containerRef","length","graph","multi","forEach","item","addNode","id","toString","label","person_name","x","y","size","color","getColorBySchool","school_teaching","splitNames","names","split","map","name","trim","toLowerCase","getNameBeforeComma","sourceItem","sourceId","sourceName","targetItem","targetId","influenced_by","influencedByNames","some","addEdge","influenced","influencedNames","sigmaInstance","current","renderEdgeLabels","enableEdgeHoverEvents","enableEdgeClickEvents","settings","inferSettings","assign","iterations","on","event","node","find","preventSigmaDefault","kill","school","colors","index","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { Graph } from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick, onCenterDoubleClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const graph = new Graph({ multi: true }); // Создаём мультиграф\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id.toString(), {\r\n        label: item.person_name,\r\n        x: item.x,\r\n        y: item.y,\r\n        size: 5,\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Функция для разбиения строки на массив имён\r\n    const splitNames = (names) => {\r\n      if (!names) return [];\r\n      return names.split(',').map((name) => name.trim().toLowerCase());\r\n    };\r\n\r\n    // Функция для получения части строки до запятой\r\n    const getNameBeforeComma = (name) => {\r\n      return name.split(',')[0].trim().toLowerCase();\r\n    };\r\n\r\n    // Добавляем рёбра на основе influenced_by и influenced\r\n    data.forEach((sourceItem) => {\r\n      const sourceId = sourceItem.id.toString();\r\n      const sourceName = getNameBeforeComma(sourceItem.person_name); // Берём часть до запятой\r\n\r\n      data.forEach((targetItem) => {\r\n        const targetId = targetItem.id.toString();\r\n\r\n        // Обрабатываем influenced_by (фиолетовые рёбра)\r\n        if (targetItem.influenced_by) {\r\n          const influencedByNames = splitNames(targetItem.influenced_by);\r\n\r\n          if (influencedByNames.some((name) => getNameBeforeComma(name) === sourceName)) {\r\n            graph.addEdge(sourceId, targetId, { color: '#800080' });\r\n          }\r\n        }\r\n\r\n        // Обрабатываем influenced (зелёные рёбра)\r\n        if (targetItem.influenced) {\r\n          const influencedNames = splitNames(targetItem.influenced);\r\n\r\n          if (influencedNames.some((name) => getNameBeforeComma(name) === sourceName)) {\r\n            graph.addEdge(targetId, sourceId, { color: '#008000' });\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current, {\r\n      renderEdgeLabels: false,\r\n      enableEdgeHoverEvents: false,\r\n      enableEdgeClickEvents: false,\r\n    });\r\n\r\n    // Применяем ForceAtlas2 с меньшим количеством итераций\r\n    const settings = forceAtlas2.inferSettings(graph);\r\n    forceAtlas2.assign(graph, { settings, iterations: 20 });\r\n\r\n    // Обработка событий\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    sigmaInstance.on('doubleClickNode', (event) => {\r\n      event.preventSigmaDefault();\r\n      const node = data.find((item) => item.id.toString() === event.node);\r\n      if (node) onCenterDoubleClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick, onCenterDoubleClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return <div ref={containerRef} style={{ width: '2000px', height: '1200px', border: '1px solid #ccc' }} />;\r\n};\r\n\r\nexport default React.memo(SpiderWeb);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}