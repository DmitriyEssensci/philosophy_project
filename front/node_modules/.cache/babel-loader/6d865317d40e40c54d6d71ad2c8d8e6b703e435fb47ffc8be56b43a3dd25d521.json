{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Sigma from 'sigma';\nimport { ForceAtlas2 } from 'graphology-layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!data.length) return;\n    const graph = new Sigma.Graph();\n\n    // Добавляем узлы\n    data.forEach(item => {\n      graph.addNode(item.id, {\n        label: item.person_name,\n        x: item.x,\n        y: item.y,\n        size: 10,\n        color: getColorBySchool(item.school_teaching)\n      });\n    });\n\n    // Добавляем ребра\n    const schoolMap = {};\n    data.forEach(item => {\n      if (!schoolMap[item.school_teaching]) {\n        schoolMap[item.school_teaching] = [];\n      }\n      schoolMap[item.school_teaching].push(item.id);\n    });\n    Object.values(schoolMap).forEach(group => {\n      if (group.length > 1) {\n        for (let i = 0; i < group.length - 1; i++) {\n          for (let j = i + 1; j < group.length; j++) {\n            graph.addEdge(group[i], group[j], {\n              color: '#ccc'\n            });\n          }\n        }\n      }\n    });\n\n    // Инициализируем Sigma\n    const sigmaInstance = new Sigma(graph, containerRef.current);\n\n    // Применяем ForceAtlas2 layout\n    const forceAtlas2 = new ForceAtlas2();\n    forceAtlas2.assign(graph);\n\n    // Обработка клика на узел\n    sigmaInstance.on('clickNode', event => {\n      const nodeId = event.data.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterClick(node);\n    });\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, onCenterClick]);\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderWeb, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SpiderWeb;\nexport default SpiderWeb;\nvar _c;\n$RefreshReg$(_c, \"SpiderWeb\");","map":{"version":3,"names":["React","useEffect","useRef","Sigma","ForceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","_s","containerRef","length","graph","Graph","forEach","item","addNode","id","label","person_name","x","y","size","color","getColorBySchool","school_teaching","schoolMap","push","Object","values","group","i","j","addEdge","sigmaInstance","current","forceAtlas2","assign","on","event","nodeId","node","find","kill","school","colors","index","ref","style","width","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Sigma from 'sigma';\r\nimport { ForceAtlas2 } from 'graphology-layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    const graph = new Sigma.Graph();\r\n\r\n    // Добавляем узлы\r\n    data.forEach((item) => {\r\n      graph.addNode(item.id, {\r\n        label: item.person_name,\r\n        x: item.x,\r\n        y: item.y,\r\n        size: 10,\r\n        color: getColorBySchool(item.school_teaching),\r\n      });\r\n    });\r\n\r\n    // Добавляем ребра\r\n    const schoolMap = {};\r\n    data.forEach((item) => {\r\n      if (!schoolMap[item.school_teaching]) {\r\n        schoolMap[item.school_teaching] = [];\r\n      }\r\n      schoolMap[item.school_teaching].push(item.id);\r\n    });\r\n\r\n    Object.values(schoolMap).forEach((group) => {\r\n      if (group.length > 1) {\r\n        for (let i = 0; i < group.length - 1; i++) {\r\n          for (let j = i + 1; j < group.length; j++) {\r\n            graph.addEdge(group[i], group[j], {\r\n              color: '#ccc',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Инициализируем Sigma\r\n    const sigmaInstance = new Sigma(graph, containerRef.current);\r\n\r\n    // Применяем ForceAtlas2 layout\r\n    const forceAtlas2 = new ForceAtlas2();\r\n    forceAtlas2.assign(graph);\r\n\r\n    // Обработка клика на узел\r\n    sigmaInstance.on('clickNode', (event) => {\r\n      const nodeId = event.data.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterClick(node);\r\n    });\r\n\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, onCenterClick]);\r\n\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return <div ref={containerRef} style={{ width: '100%', height: '100%', border: '1px solid #ccc' }} />;\r\n};\r\n\r\nexport default SpiderWeb;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAMC,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,IAAI,CAACI,MAAM,EAAE;IAElB,MAAMC,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAK,CAAC,CAAC;;IAE/B;IACAN,IAAI,CAACO,OAAO,CAAEC,IAAI,IAAK;MACrBH,KAAK,CAACI,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACI,WAAW;QACvBC,CAAC,EAAEL,IAAI,CAACK,CAAC;QACTC,CAAC,EAAEN,IAAI,CAACM,CAAC;QACTC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAEC,gBAAgB,CAACT,IAAI,CAACU,eAAe;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBnB,IAAI,CAACO,OAAO,CAAEC,IAAI,IAAK;MACrB,IAAI,CAACW,SAAS,CAACX,IAAI,CAACU,eAAe,CAAC,EAAE;QACpCC,SAAS,CAACX,IAAI,CAACU,eAAe,CAAC,GAAG,EAAE;MACtC;MACAC,SAAS,CAACX,IAAI,CAACU,eAAe,CAAC,CAACE,IAAI,CAACZ,IAAI,CAACE,EAAE,CAAC;IAC/C,CAAC,CAAC;IAEFW,MAAM,CAACC,MAAM,CAACH,SAAS,CAAC,CAACZ,OAAO,CAAEgB,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACnB,MAAM,GAAG,CAAC,EAAE;QACpB,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACnB,MAAM,GAAG,CAAC,EAAEoB,CAAC,EAAE,EAAE;UACzC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACnB,MAAM,EAAEqB,CAAC,EAAE,EAAE;YACzCpB,KAAK,CAACqB,OAAO,CAACH,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACE,CAAC,CAAC,EAAE;cAChCT,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAMW,aAAa,GAAG,IAAIhC,KAAK,CAACU,KAAK,EAAEF,YAAY,CAACyB,OAAO,CAAC;;IAE5D;IACA,MAAMC,WAAW,GAAG,IAAIjC,WAAW,CAAC,CAAC;IACrCiC,WAAW,CAACC,MAAM,CAACzB,KAAK,CAAC;;IAEzB;IACAsB,aAAa,CAACI,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;MACvC,MAAMC,MAAM,GAAGD,KAAK,CAAChC,IAAI,CAACkC,IAAI;MAC9B,MAAMA,IAAI,GAAGlC,IAAI,CAACmC,IAAI,CAAE3B,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKuB,MAAM,CAAC;MACpD,IAAIC,IAAI,EAAEjC,aAAa,CAACiC,IAAI,CAAC;IAC/B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXP,aAAa,CAACS,IAAI,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACpC,IAAI,EAAEC,aAAa,CAAC,CAAC;EAEzB,MAAMgB,gBAAgB,GAAIoB,MAAM,IAAK;IACnC,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACtE,MAAMC,KAAK,GAAG,CAAAF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEjC,MAAM,IAAGkC,MAAM,CAAClC,MAAM,IAAI,CAAC;IACjD,OAAOkC,MAAM,CAACC,KAAK,CAAC;EACtB,CAAC;EAED,oBAAOzC,OAAA;IAAK0C,GAAG,EAAErC,YAAa;IAACsC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAiB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvG,CAAC;AAAC9C,EAAA,CAlEIH,SAAS;AAAAkD,EAAA,GAATlD,SAAS;AAoEf,eAAeA,SAAS;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}