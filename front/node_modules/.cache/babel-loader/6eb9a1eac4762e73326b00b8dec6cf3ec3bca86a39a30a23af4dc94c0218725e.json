{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Sigma, RelativeSize, RandomizeNodePositions } from 'react-sigma';\nimport { useLoadGraph } from '@react-sigma/core';\nimport { useLayoutForceAtlas2 } from '@react-sigma/layout-forceatlas2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderWeb = ({\n  data,\n  onCenterClick\n}) => {\n  _s();\n  const loadGraph = useLoadGraph();\n  const {\n    assign\n  } = useLayoutForceAtlas2();\n  useEffect(() => {\n    if (!data.length) return;\n\n    // Создаем узлы и ребра для графа\n    const nodes = data.map(item => ({\n      id: item.id,\n      label: item.person_name,\n      x: item.x,\n      y: item.y,\n      size: 10,\n      color: getColorBySchool(item.school_teaching)\n    }));\n    const edges = [];\n    const schoolMap = {};\n\n    // Группируем узлы по school_teaching и создаем ребра\n    data.forEach(item => {\n      if (!schoolMap[item.school_teaching]) {\n        schoolMap[item.school_teaching] = [];\n      }\n      schoolMap[item.school_teaching].push(item.id);\n    });\n    Object.values(schoolMap).forEach(group => {\n      if (group.length > 1) {\n        for (let i = 0; i < group.length - 1; i++) {\n          for (let j = i + 1; j < group.length; j++) {\n            edges.push({\n              id: `${group[i]}-${group[j]}`,\n              source: group[i],\n              target: group[j],\n              color: '#ccc'\n            });\n          }\n        }\n      }\n    });\n\n    // Загружаем граф\n    loadGraph({\n      nodes,\n      edges\n    });\n\n    // Применяем ForceAtlas2 layout\n    assign();\n\n    // Обработка клика на узел\n    const handleClickNode = event => {\n      const nodeId = event.data.node;\n      const node = data.find(item => item.id === nodeId);\n      if (node) onCenterClick(node);\n    };\n\n    // Добавляем обработчик клика\n    const sigmaInstance = document.querySelector('.sigma-container').sigma;\n    sigmaInstance.on('clickNode', handleClickNode);\n\n    // Очистка\n    return () => {\n      sigmaInstance.kill();\n    };\n  }, [data, loadGraph, assign, onCenterClick]);\n\n  // Функция для получения цвета по школе\n  const getColorBySchool = school => {\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\n    const index = (school === null || school === void 0 ? void 0 : school.length) % colors.length || 0;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(Sigma, {\n    style: {\n      width: '100%',\n      height: '100%',\n      border: '1px solid #ccc'\n    },\n    settings: {\n      defaultNodeColor: '#666',\n      defaultEdgeColor: '#ccc',\n      enableEdgeHovering: true,\n      edgeHoverColor: 'edge',\n      edgeHoverSizeRatio: 1.5\n    },\n    children: [/*#__PURE__*/_jsxDEV(RelativeSize, {\n      initialSize: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RandomizeNodePositions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiderWeb, \"MFTn21YrsL+hWHC4HrTMiKWOXkk=\", false, function () {\n  return [useLoadGraph, useLayoutForceAtlas2];\n});\n_c = SpiderWeb;\nexport default SpiderWeb;\nvar _c;\n$RefreshReg$(_c, \"SpiderWeb\");","map":{"version":3,"names":["React","useEffect","Sigma","RelativeSize","RandomizeNodePositions","useLoadGraph","useLayoutForceAtlas2","jsxDEV","_jsxDEV","SpiderWeb","data","onCenterClick","_s","loadGraph","assign","length","nodes","map","item","id","label","person_name","x","y","size","color","getColorBySchool","school_teaching","edges","schoolMap","forEach","push","Object","values","group","i","j","source","target","handleClickNode","event","nodeId","node","find","sigmaInstance","document","querySelector","sigma","on","kill","school","colors","index","style","width","height","border","settings","defaultNodeColor","defaultEdgeColor","enableEdgeHovering","edgeHoverColor","edgeHoverSizeRatio","children","initialSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/SpiderWeb.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Sigma, RelativeSize, RandomizeNodePositions } from 'react-sigma';\r\nimport { useLoadGraph } from '@react-sigma/core';\r\nimport { useLayoutForceAtlas2 } from '@react-sigma/layout-forceatlas2';\r\n\r\nconst SpiderWeb = ({ data, onCenterClick }) => {\r\n  const loadGraph = useLoadGraph();\r\n  const { assign } = useLayoutForceAtlas2();\r\n\r\n  useEffect(() => {\r\n    if (!data.length) return;\r\n\r\n    // Создаем узлы и ребра для графа\r\n    const nodes = data.map((item) => ({\r\n      id: item.id,\r\n      label: item.person_name,\r\n      x: item.x,\r\n      y: item.y,\r\n      size: 10,\r\n      color: getColorBySchool(item.school_teaching),\r\n    }));\r\n\r\n    const edges = [];\r\n    const schoolMap = {};\r\n\r\n    // Группируем узлы по school_teaching и создаем ребра\r\n    data.forEach((item) => {\r\n      if (!schoolMap[item.school_teaching]) {\r\n        schoolMap[item.school_teaching] = [];\r\n      }\r\n      schoolMap[item.school_teaching].push(item.id);\r\n    });\r\n\r\n    Object.values(schoolMap).forEach((group) => {\r\n      if (group.length > 1) {\r\n        for (let i = 0; i < group.length - 1; i++) {\r\n          for (let j = i + 1; j < group.length; j++) {\r\n            edges.push({\r\n              id: `${group[i]}-${group[j]}`,\r\n              source: group[i],\r\n              target: group[j],\r\n              color: '#ccc',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Загружаем граф\r\n    loadGraph({ nodes, edges });\r\n\r\n    // Применяем ForceAtlas2 layout\r\n    assign();\r\n\r\n    // Обработка клика на узел\r\n    const handleClickNode = (event) => {\r\n      const nodeId = event.data.node;\r\n      const node = data.find((item) => item.id === nodeId);\r\n      if (node) onCenterClick(node);\r\n    };\r\n\r\n    // Добавляем обработчик клика\r\n    const sigmaInstance = document.querySelector('.sigma-container').sigma;\r\n    sigmaInstance.on('clickNode', handleClickNode);\r\n\r\n    // Очистка\r\n    return () => {\r\n      sigmaInstance.kill();\r\n    };\r\n  }, [data, loadGraph, assign, onCenterClick]);\r\n\r\n  // Функция для получения цвета по школе\r\n  const getColorBySchool = (school) => {\r\n    const colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1'];\r\n    const index = school?.length % colors.length || 0;\r\n    return colors[index];\r\n  };\r\n\r\n  return (\r\n    <Sigma\r\n      style={{ width: '100%', height: '100%', border: '1px solid #ccc' }}\r\n      settings={{\r\n        defaultNodeColor: '#666',\r\n        defaultEdgeColor: '#ccc',\r\n        enableEdgeHovering: true,\r\n        edgeHoverColor: 'edge',\r\n        edgeHoverSizeRatio: 1.5,\r\n      }}\r\n    >\r\n      <RelativeSize initialSize={10} />\r\n      <RandomizeNodePositions />\r\n    </Sigma>\r\n  );\r\n};\r\n\r\nexport default SpiderWeb;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}