{"ast":null,"code":"var _jsxFileName = \"/home/dmitriyessensci/me/philosophy_project/front/src/components/PhilosophersList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ConnectionsScale from './ConnectionsScale';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhilosophersList = ({\n  data\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Фильтруем философов с хотя бы одной связью\n  const filteredData = data.filter(item => {\n    const influencedByCount = item.influenced_by ? item.influenced_by.split(',').length : 0;\n    const influencedCount = item.influenced ? item.influenced.split(',').length : 0;\n    return influencedByCount > 0 || influencedCount > 0;\n  });\n\n  // Сортируем по сумме всех связей (от наибольшего к наименьшему)\n  const sortedData = filteredData.sort((a, b) => {\n    const aConnections = (a.influenced_by ? a.influenced_by.split(',').length : 0) + (a.influenced ? a.influenced.split(',').length : 0);\n    const bConnections = (b.influenced_by ? b.influenced_by.split(',').length : 0) + (b.influenced ? b.influenced.split(',').length : 0);\n    return bConnections - aConnections;\n  });\n\n  // Подсчёт общего количества зелёных и фиолетовых связей\n  const totalGreenConnections = data.reduce((acc, item) => acc + (item.influenced ? item.influenced.split(',').length : 0), 0);\n  const totalPurpleConnections = data.reduce((acc, item) => acc + (item.influenced_by ? item.influenced_by.split(',').length : 0), 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: '10px',\n      right: '20px',\n      zIndex: 1000\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      style: {\n        padding: '10px',\n        backgroundColor: '#fff',\n        border: '2px solid #ccc',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: isOpen ? 'Скрыть список' : 'Показать список философов'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '5px',\n        backgroundColor: '#fff',\n        border: '2px solid #ccc',\n        borderRadius: '5px',\n        padding: '15px',\n        maxHeight: '500px',\n        overflowY: 'auto',\n        width: '300px' // Фиксированная ширина для аккуратного отображения\n      },\n      children: [/*#__PURE__*/_jsxDEV(ConnectionsScale, {\n        greenConnections: totalGreenConnections,\n        purpleConnections: totalPurpleConnections\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), sortedData.map(item => {\n        const greenConnections = item.influenced ? item.influenced.split(',').length : 0;\n        const purpleConnections = item.influenced_by ? item.influenced_by.split(',').length : 0;\n        const totalConnections = greenConnections + purpleConnections;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px',\n            padding: '1px',\n            borderBottom: '2px solid #eee' // Разделитель между элементами\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.person_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: '5px 0',\n              fontSize: '14px',\n              color: '#666'\n            },\n            children: item.short_description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ConnectionsScale, {\n            greenConnections: greenConnections,\n            purpleConnections: purpleConnections\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: '5px 0',\n              fontSize: '12px',\n              color: '#888'\n            },\n            children: [\"\\u0412\\u0441\\u0435\\u0433\\u043E \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439: \", totalConnections]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(PhilosophersList, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = PhilosophersList;\nexport default PhilosophersList;\nvar _c;\n$RefreshReg$(_c, \"PhilosophersList\");","map":{"version":3,"names":["React","useState","ConnectionsScale","jsxDEV","_jsxDEV","PhilosophersList","data","_s","isOpen","setIsOpen","filteredData","filter","item","influencedByCount","influenced_by","split","length","influencedCount","influenced","sortedData","sort","a","b","aConnections","bConnections","totalGreenConnections","reduce","acc","totalPurpleConnections","style","position","bottom","right","zIndex","children","onClick","padding","backgroundColor","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","maxHeight","overflowY","width","greenConnections","purpleConnections","map","totalConnections","marginBottom","borderBottom","person_name","margin","fontSize","color","short_description","id","_c","$RefreshReg$"],"sources":["/home/dmitriyessensci/me/philosophy_project/front/src/components/PhilosophersList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ConnectionsScale from './ConnectionsScale';\r\n\r\nconst PhilosophersList = ({ data }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Фильтруем философов с хотя бы одной связью\r\n  const filteredData = data.filter((item) => {\r\n    const influencedByCount = item.influenced_by ? item.influenced_by.split(',').length : 0;\r\n    const influencedCount = item.influenced ? item.influenced.split(',').length : 0;\r\n    return influencedByCount > 0 || influencedCount > 0;\r\n  });\r\n\r\n  // Сортируем по сумме всех связей (от наибольшего к наименьшему)\r\n  const sortedData = filteredData.sort((a, b) => {\r\n    const aConnections = (a.influenced_by ? a.influenced_by.split(',').length : 0) + (a.influenced ? a.influenced.split(',').length : 0);\r\n    const bConnections = (b.influenced_by ? b.influenced_by.split(',').length : 0) + (b.influenced ? b.influenced.split(',').length : 0);\r\n    return bConnections - aConnections;\r\n  });\r\n\r\n  // Подсчёт общего количества зелёных и фиолетовых связей\r\n  const totalGreenConnections = data.reduce((acc, item) => acc + (item.influenced ? item.influenced.split(',').length : 0), 0);\r\n  const totalPurpleConnections = data.reduce((acc, item) => acc + (item.influenced_by ? item.influenced_by.split(',').length : 0), 0);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        bottom: '10px',\r\n        right: '20px',\r\n        zIndex: 1000,\r\n      }}\r\n    >\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        style={{\r\n          padding: '10px',\r\n          backgroundColor: '#fff',\r\n          border: '2px solid #ccc',\r\n          borderRadius: '5px',\r\n          cursor: 'pointer',\r\n        }}\r\n      >\r\n        {isOpen ? 'Скрыть список' : 'Показать список философов'}\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div\r\n          style={{\r\n            marginTop: '5px',\r\n            backgroundColor: '#fff',\r\n            border: '2px solid #ccc',\r\n            borderRadius: '5px',\r\n            padding: '15px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto',\r\n            width: '300px', // Фиксированная ширина для аккуратного отображения\r\n          }}\r\n        >\r\n          {/* Шкала связей */}\r\n          <ConnectionsScale\r\n            greenConnections={totalGreenConnections}\r\n            purpleConnections={totalPurpleConnections}\r\n          />\r\n\r\n          {/* Список философов */}\r\n          {sortedData.map((item) => {\r\n            const greenConnections = item.influenced ? item.influenced.split(',').length : 0;\r\n            const purpleConnections = item.influenced_by ? item.influenced_by.split(',').length : 0;\r\n            const totalConnections = greenConnections + purpleConnections;\r\n\r\n            return (\r\n              <div\r\n                key={item.id}\r\n                style={{\r\n                  marginBottom: '10px',\r\n                  padding: '1px',\r\n                  borderBottom: '2px solid #eee', // Разделитель между элементами\r\n                }}\r\n              >\r\n                <strong>{item.person_name}</strong>\r\n                <p style={{ margin: '5px 0', fontSize: '14px', color: '#666' }}>\r\n                  {item.short_description}\r\n                </p>\r\n                <ConnectionsScale\r\n                  greenConnections={greenConnections}\r\n                  purpleConnections={purpleConnections}\r\n                />\r\n                <p style={{ margin: '5px 0', fontSize: '12px', color: '#888' }}>\r\n                  Всего связей: {totalConnections}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhilosophersList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}